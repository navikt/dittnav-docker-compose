version: '3.7'
services:

  postgres:
    container_name: postgres
    networks:
      dittnav.docker-internal:
        aliases:
          - postgres.dittnav.docker-internal
    image: "postgres:11.5"
    volumes:
      - "dittnav-event-cache-data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "test-user"
      POSTGRES_PASSWORD: "testpassword"
      POSTGRES_DB: "dittnav-event-cache-preprod"

  zookeeper:
    container_name: zookeeper
    networks:
      dittnav.docker-internal:
        aliases:
          - zookeeper.dittnav.docker-internal
    image: "confluentinc/cp-zookeeper:5.3.1"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"

  kafka:
    container_name: kafka
    networks:
      dittnav.docker-internal:
        aliases:
          - kafka.dittnav.docker-internal
    image: "confluentinc/cp-kafka:5.3.1"
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      ADV_HOST: "kafka.dittnav.docker-internal"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper.dittnav.docker-internal:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka.dittnav.docker-internal:9092,PLAINTEXT_HOST://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
    command: "sh -c '/scripts/wait-for-it.sh zookeeper.dittnav.docker-internal:2181 -- /etc/confluent/docker/run'"
    volumes:
      - ./composescripts:/scripts

  schema-registry:
    container_name: schema-registry
    networks:
      dittnav.docker-internal:
        aliases:
          - schema-registry.dittnav.docker-internal
    image: "confluentinc/cp-schema-registry:5.3.1"
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka.dittnav.docker-internal:9092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry.dittnav.docker-internal"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    depends_on:
      - zookeeper
      - kafka

  oidc-provider:
    container_name: oidc-provider
    networks:
      dittnav.docker-internal:
        aliases:
          - oidc-provider.dittnav.docker-internal
    image: "docker.pkg.github.com/navikt/stub-oidc-provider/stub-oidc-provider:latest"
    ports:
      - "9000:9000"
    environment:
      PORT: "9000"
      CALLBACK_URL: "http://localhost:5000/callback"
      ISSUER: "https://localhost:9000"

  oidc-provider-gui:
    container_name: oidc-provider-gui
    networks:
      dittnav.docker-internal:
        aliases:
          - oidc-provider-gui.dittnav.docker-internal
    image: "navikt/pb-oidc-provider-gui:latest"
    ports:
      - "5000:5000"
    depends_on:
      - oidc-provider
    environment:
      REDIRECT_URL: "http://localhost:3000"
      AUTO_REDIRECT_TO_FRONTEND: "true"

  aggregator:
    container_name: aggregator
    networks:
      dittnav.docker-internal:
        aliases:
          - aggregator.dittnav.docker-internal
    image: "navikt/dittnav-event-aggregator:latest"
    ports:
      - "8093:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka.dittnav.docker-internal:9092"
      KAFKA_SCHEMAREGISTRY_SERVERS: "http://schema-registry.dittnav.docker-internal:8081"
      DB_HOST: "postgres.dittnav.docker-internal:5432"
    depends_on:
      - postgres
      - oidc-provider-gui
      - schema-registry

  handler:
    container_name: handler
    networks:
      dittnav.docker-internal:
        aliases:
          - handler.dittnav.docker-internal
    image: "navikt/dittnav-event-handler:latest"
    ports:
      - "8092:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka.dittnav.docker-internal:9092"
      KAFKA_SCHEMAREGISTRY_SERVERS: "http://schema-registry.dittnav.docker-internal:8081"
      DB_HOST: "postgres.dittnav.docker-internal:5432"
      OIDC_DISCOVERY_URL: "http://oidc-provider.dittnav.docker-internal:9000/.well-known/openid-configuration"
    depends_on:
      - oidc-provider-gui
      - postgres
      - schema-registry
      - aggregator

  api:
    container_name: api
    networks:
      dittnav.docker-internal:
        aliases:
          - api.dittnav.docker-internal
    image: "navikt/dittnav-api:latest"
    ports:
      - "8091:8080"
    environment:
      LEGACY_API_URL: "http://legacy.dittnav.docker-internal:8080/person/dittnav-legacy-api"
      EVENT_HANDLER_URL: "http://handler.dittnav.docker-internal:8080"
      OIDC_DISCOVERY_URL: "http://oidc-provider.dittnav.docker-internal:9000/.well-known/openid-configuration"
      CORS_ALLOWED_ORIGINS: "*"
    depends_on:
      - oidc-provider
      - handler
      - legacy

  legacy:
    container_name: legacy
    networks:
      dittnav.docker-internal:
        aliases:
          - legacy.dittnav.docker-internal
    image: "navikt/dittnav-legacy-api:latest"
    ports:
      - "8090:8080"
    environment:
      NAIS_APP_NAME: "dittnav-legacy-api"
      NAIS_NAMESPACE: "localhost"
      AAD_B2C_DISCOVERY_URL: "http://oidc-provider.dittnav.docker-internal:9000/.well-known/openid-configuration"
      AAD_B2C_CLIENTID_USERNAME: "stubOidcClient"
      EXTERNAL_USERS_AZUREAD_B2C_EXPECTED_AUDIENCE: "https://localhost:9000"
      DITTNAV_LEGACY_API_TPS_PROXY_API_APIKEY_USERNAME: "dummyApiKey"
      DITTNAV_LEGACY_API_TPS_PROXY_API_APIKEY_PASSWORD: "dummyApiPassword"
      TJENESTER_URL: "https://dummyTjenester.nav.no"
      SAKSOVERSIKT_API_URL: "http://mocks.dittnav.docker-internal:8080/saksoversikt-api"
      TPS_PROXY_API_V1_NAVN_URL: "http://mocks.dittnav.docker-internal:8080/tpsproxy/"
      MININNBOKS_API_URL: "http://mocks.dittnav.docker-internal:8080/mininnboks-api"
      MELDEKORT_API_URL: "http://mocks.dittnav.docker-internal:8080/meldekort-api"
      OPPFOLGING_URL: "http://mocks.dittnav.docker-internal:8080/oppfolging"
      CORS_ALLOWED_ORIGINS: ".nav.no,.oera-q.local"
      # Dette er et lite hack for å slippe at loggen oversvømmes av meldinger om at sensu-hosten ikke finnes.
      sensu_client_host: "localhost"
      sensu_client_port: "8080"

  mocks:
    container_name: mocks
    networks:
      dittnav.docker-internal:
        aliases:
          - mocks.dittnav.docker-internal
    image: "navikt/pb-nav-mocked:latest"
    ports:
      - "8095:8080"
    environment:
      CORS_ALLOWED_ORIGINS: "*"
      OIDC_ISSUER: "https://localhost:9000"
      OIDC_ACCEPTED_AUDIENCE: "stubOidcClient"
      OIDC_JWKS_URI: "http://oidc-provider.dittnav.docker-internal:9000/certs"
    depends_on:
      - oidc-provider

  producer:
    container_name: producer
    networks:
      dittnav.docker-internal:
        aliases:
          - producer.dittnav.docker-internal
    image: "navikt/dittnav-event-test-producer:latest"
    ports:
      - "8094:8080"
    environment:
      CORS_ALLOWED_ORIGINS: "localhost:9002"
      KAFKA_BOOTSTRAP_SERVERS: "kafka.dittnav.docker-internal:9092"
      KAFKA_SCHEMAREGISTRY_SERVERS: "http://schema-registry.dittnav.docker-internal:8081"
      DB_HOST: "postgres.dittnav.docker-internal:5432"
      OIDC_DISCOVERY_URL: "http://oidc-provider.dittnav.docker-internal:9000/.well-known/openid-configuration"
    depends_on:
      - oidc-provider-gui
      - postgres
      - schema-registry

  dekoratoren:
    container_name: dekoratoren
    networks:
      dittnav.docker-internal:
        aliases:
          - dekoratoren.dittnav.docker-internal
    image: "navikt/nav-dekoratoren:a57771d2-d804-403a-8d76-c0c350c98531-master"
    ports:
      - "8100:8088"
    environment:
      URL_APP_BASE: "http://localhost:8100/person/nav-dekoratoren"
      baseUrl: 'http://localhost:8100'
      baseUrlEnonic: 'https://www-x1.nav.no'
      innloggingslinjenUrl: 'http://localhost:8095/innloggingslinje-api/auth'
      loginUrl: 'http://localhost:5000'
      logoutUrl: 'http://localhost:5000/?logout'
      menypunkter: 'http://localhost:8100/person/nav-dekoratoren/api/get/menyvalg'
      minsideArbeidsgiverUrl: 'https://arbeidsgiver-q.nav.no/min-side-arbeidsgiver/'
      sokeresultat: 'http://localhost:8100/person/nav-dekoratoren/api/get/sokeresultat'
      varselinnboksUrl: 'https://www-q0.nav.no/person/varselinnboks'

  frontend:
    container_name: frontend
    networks:
      dittnav.docker-internal:
        aliases:
          - frontend.dittnav.docker-internal
    image: "navikt/dittnav:latest"
    ports:
      - "3000:8080"
    environment:
      NAIS_APP_NAME: "dittnav"
      APPRES_CMS_URL: "https://appres.nav.no"
      NAIS_NAMESPACE: "localhost"
      DITTNAV_LEGACY_API_URL: "http://localhost:8091/person/dittnav-api"
      DITTNAV_API_URL: "http://localhost:8091/person/dittnav-api"
      TJENESTER_URL: "http://dummyTjenester.nav.no"
      EVENT_TEST_PRODUCER_URL: "http://localhost:8094"
      NAVNO_URL: "www.nav.no"
      LOGIN_URL: "http://localhost:5000?redirect=http://localhost:3000"
      VTA_URL: "http://dummyVeientilarbeid.nav.no"
      INNLOGGINGSLINJE_API_URL: "http://localhost:8095/innloggingslinje-api"
      ARBEIDSSOKERREGISTRERING_URL: "http://dummyArbeidssokerregistrering.nav.no"
      ER_DEV: "true"
      # Dette er et lite hack for å slippe at loggen oversvømmes av meldinger om at sensu-hosten ikke finnes.
      sensu_client_host: "localhost"
      sensu_client_port: "8080"

volumes:
  dittnav-event-cache-data:

networks:
  dittnav.docker-internal:
